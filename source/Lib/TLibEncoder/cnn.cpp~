#include "cnn.h"

cv::Mat kron(const cv::Mat& A, const cv::Mat& B)
{
    CV_Assert(A.channels() == 1 && B.channels() == 1);

    cv::Mat1d Ad, Bd;
    A.convertTo(Ad, CV_64F);
    B.convertTo(Bd, CV_64F);

    cv::Mat1d Kd(Ad.rows * Bd.rows, Ad.cols * Bd.cols, 0.0);
    for (int ra = 0; ra < Ad.rows; ++ra)
    {
        for (int ca = 0; ca < Ad.cols; ++ca)
        {
            Kd(cv::Range(ra*Bd.rows, (ra + 1)*Bd.rows), cv::Range(ca*Bd.cols, (ca + 1)*Bd.cols)) = Bd.mul(Ad(ra, ca));
        }
    }
    cv::Mat K;
    Kd.convertTo(K, A.type());
    return K;
}

float* mean_pooling(const float* data , int height , int width )
{   
   int strid = 2;

   float* output = new float[height/strid*width/strid];
   for (int y = 0; y < height/strid; ++y)
   {
     for (int x = 0; x < width/strid ; ++x)
     { 
       float sum = 0;
       for (int i = 0; i < strid ; ++i)
        for (int j = 0; j < strid ; j++)
            sum += data[ ( y* strid + i ) * width +  x * strid + j];
      output[y*width/strid+x] = sum / ( strid * strid ) ;
    }
  }
  return output;
}
   
 

CNN::CNN(const string& model_file,
         const string& trained_file){
  #ifdef CPU_ONLY
  Caffe::set_mode(Caffe::CPU);
  #else 
  Caffe::set_mode(Caffe::GPU);
  #endif

  /*Load the network*/
  net_.reset(new Net<float>(model_file,TEST));
  net_->CopyTrainedLayersFrom(trained_file);
  Blob<float>* input_layer = net_->input_blobs()[0];
  input_geometry_=cv::Size(input_layer->width(),input_layer->height());
  num_channels_=input_layer->channels();
}

void CNN::WrapInputLayer(std::vector<cv::Mat>* input_channels){
   Blob<float>* input_layer = net_->input_blobs()[0];

   int width = input_layer->width();
   int height = input_layer->height();
   float* input_data = input_layer->mutable_cpu_data();
   for(int i = 0; i < input_layer->channels();++i){
    cv::Mat channel(height,width,CV_32FC1,input_data);
    input_channels->push_back(channel);
    input_data += width * height;
   }
}

 float* CNN::ProcessImg(float* img , bool uv , int num_poc){
  Blob<float>* input_layer = net_->input_blobs()[0];
  input_layer->Reshape(1,num_channels_,input_geometry_.height,input_geometry_.width);
  
  net_->Reshape();
  
  std::vector<cv::Mat> input_channels;
  WrapInputLayer(&input_channels);
   
  cv::Mat img_float;
  if (uv==1)
  {
    // 2x2 in y have the seme u and v 
    // so u v have a quarter of the size of y 
    cv::Mat mat1(input_geometry_.height/2,input_geometry_.width/2,CV_32FC1,img);
    cv::Mat mat2 = (cv::Mat_<float>(2, 2) << 1, 1, 1, 1);
    img_float = kron(mat1,mat2).clone();
  }

  else 
  {
    cv::Mat temp(input_geometry_.height , input_geometry_.width , CV_32FC1 , img);
    img_float = temp.clone();
    cv::Mat img_uint8;
    img_float.convertTo(img_uint8,CV_8UC1,255);
    char filename[100];
    sprintf(filename,"%d_input.bmp",num_poc);
    imwrite(filename,img_uint8);
    
    
  }
 // cv::waitKey(0);
  /*cv::Mat img_float(input_geometry_.height,input_geometry_.width,CV_32FC1);
   for (int y = 0; y < input_geometry_.height; ++y)
  {
    for (int x = 0; x < input_geometry_.width; ++x)
    {
      //std::cout << img[y*input_geometry_.width+x] << " " ;
      img_float.at<float>(y,x) = img[y*input_geometry_.width+x] ;
    }
   // std::cout << std::endl ;
  }
  */
  
  //std::cout << img_float << std::endl;

  //cv::imshow("input",img_uint8);
  //cv::waitKey(0);
  cv::split(img_float,input_channels);
  //std::cout<<input_channels.size()<<std::endl;
  CHECK(reinterpret_cast<float*>((&input_channels)->at(0).data)
        == net_->input_blobs()[0]->cpu_data())
    << "Input channels are not wrapping the input layer of the network.";
  
  net_->Forward();
  
  Blob<float>* output_layer = net_->output_blobs()[0];
  const string string_size = output_layer->shape_string();
  //std::cout<<string_size<<std::endl;
  float* begin = output_layer->mutable_cpu_data();
  //cv::Mat recover_img(input_geometry_.height,input_geometry_.width,CV_32FC1,begin);
  //recover_img.convertTo(img_uint8,CV_8UC1,255);
  //cv::imshow("output",img_uint8);
  float* output;
  if(uv==1){
    output = mean_pooling(begin,input_geometry_.height,input_geometry_.width);
  }

  else {
      cv::Mat temp(input_geometry_.height , input_geometry_.width , CV_32FC1 , begin);
      char filename[100];
      sprintf(filename,"%d.bmp",num_poc);
      cv::Mat img_uint8;
      temp.convertTo(img_uint8,CV_8UC1,255);
      imwrite(filename,temp);
      output = begin ;
  }
  return output;
}


